# -*- coding: utf-8 -*-
"""Data miner

.. module:: S_Plotter
    :platform: Unix
    :synopis:

.. moduleauthor: CEMAC (UoL)

.. description: This module was developed by CEMAC as part of the AMAMA 2050
   Project. This script plots data generated by S_Box and S_Dataminer. Generic
   plotting tools and replication of original plot are made here.

   :copyright: Â© 2018 University of Leeds.
   :license: BSD-2 Clause.

Example:
    To use::
        import StormScriptsPy3 as SSP3

.. CEMAC_stomtracking:
   https://github.com/cemac/StormTrackingScripts
"""

import pandas as pd
import numpy as np
import scipy.stats as stat
import matplotlib.pyplot as plt
from pylab import rcParams
rcParams['figure.figsize'] = 36, 48

def correls(var1, var2, labelstr):
    correlfirst = stat.pearsonr(var1, var2)
    ptest = correlfirst[1]
    correlfirst_run = float("{0:.3f}".format(correlfirst[0]))
    if ptest < 0.05:
        plt.plot(np.unique(var1), np.poly1d(np.polyfit(var1, var2, 1))
                 (np.unique(var1)), color='r', label=labelstr +
                 str(correlfirst))
    else:
        plt.plot(np.unique(var1), np.poly1d(np.polyfit(var1, var2, 1))
                 (np.unique(var1)), color='r', linestyle='--',
                 label=labelstr + str(correlfirst))
    return correlfirst_run


def correl_panel_plot(panelno, figletter, var1c, var2c, var1f, var2f,
                      xlabel, ylabel='99th percentile \n precipitation rate (mm/hr)',
                      panels=[3, 4]):
    plt.subplot(panels[0],panels[1], panelno)
    plt.ylabel(ylabel, fontsize=12)
    print(len(var1c),len(var2c))
    print(len(var1f),len(var2f))
    plt.scatter(var1c, var2c, c='r', marker='*', s=5)
    plt.scatter(var1f, var2f, c='b', marker='v', s=5)
    plt.xlabel(xlabel, fontsize=12)
    try:
        cc = correls(var1c, var2c, ' CC correl')
        fc = correls(var1f, var2f, ' FC correl')
        plt.title(figletter + 'CC correl = ' + str(cc) +
              ', FC correl = ' + str(fc), loc='right', fontsize=16)
    except:
        print('plot '+figletter+'did not fully succeed')
    return


def shear_pdfs(panelno, figlet, var1c, var1f, xlabel,
               ylabel='Probaility density', panels=[3, 4]):
    plt.subplot(panels[0],panels[1], panelno)
    mean_var1c = np.average(var1c)
    mean_var1f = np.average(var1f)
    correl = stat.ttest_ind(var2c, var2f, equal_var=False)
    Sigval = 1.0 - correl[1]
    Sigval = float("{0:.3f}".format(Sigval))
    bins = np.linspace(np.min([np.min(var1f[:]), np.min(var1c[:])]),
                       np.max([np.max(var1f[:]), np.max(var1c[:])]), 25)
    plt.title(figlet + '- Confidence Interval = ' + str(Sigval), fontsize=16)
    n, bins, patches = plt.hist(var1c[:], bins, normed=1, facecolor='g',
                                label='mean = ' +
                                str(float("{0:.2f}".format(mean_var1c))))
    n, bins, patches = plt.hist(var1f[:], bins, normed=1, facecolor='b',
                                alpha=0.5, label='mean = ' +
                                str(float("{0:.2f}".format(mean_var1f))))
    plt.scatter(mean_var1c, 0, c='g')
    plt.scatter(mean_var1f, 0, c='b')
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.legend(fontsize=8)


def createvars(csvname):
    df = pd.read_csv(csvname, sep=',')
    # Remove duplicate storms
    df = df.drop_duplicates(subset='storms_to_keep', keep='first')
    # Manipulate varibales and add to dataframe
    df['cold'] = df.mean_T15_1800 - df.mean_T15_1200
    df['mslp_diff'] = df.eve_mslp_mean - df.midday_mslp
    df['u_diff_10m'] = df.eve_wind_99p - df.midday_wind
    df['u3_diff_10m'] = df.eve_wind3_99p - df.midday_wind3
    df['precip99'] = df.precip_99th_perc * 3600
    df['precipvol'] = df.precip_accum * 3600
    df['shear_TCW_mid'] = df.hor_shear * df.mass_mean_1200
    df['shear_TCW_eve'] = df.hor_shear * df.mass_mean_1800
    df['triple_threat_mid'] = df.shear_TCW_mid * df.omega_1200_1p
    df['triple_threat_eve'] = df.shear_TCW_eve * df.omega_1800_1p
    df['TCW_omega_eve'] = df.mass_mean_1800 * df.omega_1800_1p
    return df


def bins(v1, v2):
    vbin = np.linspace(np.min([np.min(v1), np.min(v2)]), np.max([np.max(v1),
                       np.max(v2)]), 25)
    return vbin


def bothhists(bc_hist, var1, var2, varP, T_bins, o_bins):
    var1 = var1.reset_index(drop=True)
    var2 = var2.reset_index(drop=True)
    varP = varP.reset_index(drop=True)
    for element in range(0, len(var1)):
        OMEGA = var2[element]
        TCW = var1[element]
        a=25
        for x in range(0, int(a) - 1):
            for y in range(0, int(a) - 1):
                    if x < int(a) - 1 and y < int(a) - 1:
                        if o_bins[x] <= OMEGA < o_bins[x+1] and T_bins[y] <= TCW < T_bins[y+1]:
                            bc_hist[y, x, 0] = bc_hist[y, x, 0] + 1
                            bc_hist[y, x, 1] = bc_hist[y, x, 1] + varP[element]
    return bc_hist


class stormcalcs(object):
    '''Description
       Stage 1: currently a suit of functions for finding information on
       storms in region and Generating cvs files of that information.

    '''
    def __init__(self, fc_csv, cc_csv):

        self.fcname = fc_csv
        self.ccname = cc_csv
        self.df_fc = self.createvars(csvnamefc)
        self.df_cc = self.createvars(csvnamecc)

    def Rorys__precip_correl(self, df_fc, df_cc, figname):

        panelno = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        figletter = ['a) ', 'b) ', 'c) ', 'd) ', 'e) ', 'f) ', 'g) ', 'h) ',
                     'i) ', 'j) ', 'k) ']

        xlab = ['1200 UTC wind shear magnitude (m/s)', '1800 UTC TCWV (kg/m2)',
                '1800 UTC minimum omega (Pa/s)', '1200 UTC shear x 1800Z TCWV',
                '1800 UTC TCWV x omega', '1800 UTC TCWV x omega x 1200 UTC shear',
                '1800 UTC mean OLR (W/m2)', '1200 UTC mean MU-CAPE (J)',
                '1800 UTC 1-hour total rainfall (kg)',
                '1200 UTC mean 700 hPa RH (%)', 'Cold pool marker (K)']

        var1c = [df_cc.hor_shear, df_cc.shear_TCW_eve, df_cc.omega_1800_1p,
                 df_cc.shear_TCW_eve, df_cc.TCW_omega_eve,
                 df_cc.triple_threat_eve, df_cc.OLRs, df_cc.CAPE_CAPE,
                 df_cc.Tephi_RH650, df_cc.precipvol, df_cc.cold]

        var1f = [df_fc.hor_shear, df_fc.shear_TCW_eve, df_fc.omega_1800_1p,
                 df_fc.shear_TCW_eve, df_fc.TCW_omega_eve,
                 df_fc.triple_threat_eve, df_fc.OLRs, df_fc.CAPE_CAPE,
                 df_fc.Tephi_RH650, df_fc.precipvol, df_fc.cold - 0.514998]

        var2f = df_fc.precip99
        var2c = df_cc.precip99

        for i in panelno:
            correl_panel_plot(i, figletter[i-1], var1c[i-1], var2c, var1f[i-1],
                              var2f, xlab[i-1])
        plt.tight_layout()
        plt.savefig(figname + '_precip_correlations.png')
        plt.clf()

    def Rorys_shear_pdf(self, df_fc, df_cc, figname):

        panelno = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        figletter = ['a) ', 'b) ', 'c) ', 'd) ', 'e) ', 'f) ', 'g) ', 'h) ',
                     'i) ', 'j) ', 'k) ']
        xlab = ['1800 UTC 99p precipitation rate (mm/hr)',
                '1200 UTC mean zonal \n wind shear (m/s)',
                '1200 UTC mean wind \n shear magnitude (m/s)',
                '1800 UTC mean Total Column \n Water Vapor (kg/m2)',
                '1200 UTC mean MU-CAPE (J)', '1200 UTC mean MU-CIN (J)',
                '1200 UTC mean 700 hPa RH (%)', '1800 UTC mean OLR (W/m2)',
                '1800 UTC min omega (Pa/s)',
                '1800 UTC 1-hour total rainfall (kg)',
                "1800 UTC storm area ('000,000 km2)",
                '1800 UTC cold pool marker (K)']

        var1c = [df_cc.precip99, df_cc.max_shear, df_cc.hor_shear,
                 df_cc.shear_TCW_eve, df_cc.CAPE_CAPE, df_cc.CAPE_CIN,
                 df_cc.Tephi_RH650, df_cc.OLRs, df_cc.omega_1800_1p,
                 df_cc.precipvol, df_cc.area*100*100/1000000, df_cc.cold]

        var1f = [df_fc.precip99, df_fc.max_shear, df_fc.hor_shear,
                 df_fc.shear_TCW_eve, df_fc.CAPE_CAPE, df_fc.CAPE_CIN,
                 df_fc.Tephi_RH650, df_fc.OLRs, df_fc.omega_1800_1p,
                 df_fc.precipvol, df_fc.area*100*100/1000000, df_fc.cold]

        for i in panelno:
            shear_pdfs(i, figletter[i-1], var1c[i-1], var1f[i-1], xlab[i-1])

        plt.tight_layout()
        plt.savefig(figname + '_PDF.png')
        plt.clf()

    def Rorys__Correl1(self, df_fc, df_cc, figname):

        panelno = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        figletter = ['a) ', 'b) ', 'c) ', 'd) ', 'e) ', 'f) ', 'g) ', 'h) ',
                     'i) ', 'j) ', 'k) ', 'l) ']
        shearlab = '1200 UTC mean shear magnitude (m/s)'
        mucap = '1200 UTC mean MU-CAPE (J)'
        mino = '1800 UTC minimum \n omega (Pa/s)'
        cold = '1800 UTC cold pool \n marker (K)'
        capesrt = '1200 UTC square root MU-CAPE (J)',
        bouy = '1800 UTC Max buoyancy (K)'
        xlab = [shearlab, shearlab, shearlab, '1200 UTC mean OLR (W/m2)',
                capesrt, bouy, '1200 UTC mean 650 hPa RH (%)', shearlab, mucap,
                '1800 UTC cold pool marker (%)', mucap, '1200 UTC mean MU-CIN (J)']
        ylab = ['1800 UTC mean \n OLR (W/m2)', mino, capesrt, mino, mino, mino,
                cold, '1200 UTC mean \n MU-CAPE (J)', cold, mino, bouy, cold]

        var1c = [df_cc.hor_shear, df_cc.hor_shear, df_cc.hor_shear,
                 df_cc.OLRs,    df_cc.CAPE_CAPE**0.5, df_cc.buoyancy_1800_1p,
                 df_cc.Tephi_RH650,  df_cc.hor_shear, df_cc.CAPE_CAPE,
                 df_cc.cold, df_cc.CAPE_CAPE, df_cc.CAPE_CIN]

        var1f = [df_fc.hor_shear, df_fc.hor_shear, df_fc.hor_shear,
                 df_fc.OLRs,    df_fc.CAPE_CAPE**0.5, df_fc.buoyancy_1800_1p,
                 df_fc.Tephi_RH650,  df_fc.hor_shear, df_fc.CAPE_CAPE,
                 df_fc.cold, df_fc.CAPE_CAPE, df_fc.CAPE_CIN]

        var2c = [df_cc.OLRs, df_cc.omega_1800_1p, df_cc.CAPE_CAPE**0.5,
                 df_cc.omega_1800_1p,  df_cc.omega_1800_1p, df_cc.omega_1800_1p,
                 df_cc.cold, df_cc.CAPE_CAPE, df_cc.cold, df_cc.omega_1800_1p,
                 df_cc.buoyancy_1800_1p, df_cc.cold]

        var2f = [df_fc.OLRs, df_fc.omega_1800_1p, df_fc.CAPE_CAPE**0.5,
                 df_fc.omega_1800_1p,  df_fc.omega_1800_1p, df_fc.omega_1800_1p,
                 df_fc.cold, df_fc.CAPE_CAPE, df_fc.cold, df_fc.omega_1800_1p,
                 df_fc.buoyancy_1800_1p, df_fc.cold]

        for i in panelno:
                correl_panel_plot(i, figletter[i-1], var1c[i-1], var2c[i-1], var1f[i-1],
                              var2f[i-1], xlab[i-1], ylabel=ylab[i-1])
        plt.tight_layout()
        plt.savefig(figname + '_correlations.png')
        plt.clf()

    def Rorys__Correl2(self, df_fc, df_cc, figname):

        panelno = [1, 2]
        figletter = ['a) ', 'b) ']
        xlab = ['Horizontal wind shear (m/s)', 'SBCAPE']
        var1c = [df_cc.hor_shear, df_cc.CAPE_CAPE]
        var1f = [df_fc.hor_shear, df_fc.CAPE_CAPE]
        var2c = df_cc.precip99 / (df_cc.shear_TCW_eve * df_cc.omega_1800_1p)
        var2f = df_fc.precip99 / (df_fc.shear_TCW_eve * df_fc.omega_1800_1p)

        for i in panelno:
            correl_panel_plot(i, figletter[i-1], var1c[i-1], var2c, var1f[i-1],
                              var2f, xlab[i-1], ylabel='precip/(TCWV x omega)')
        plt.tight_layout()
        plt.savefig(figname + '_correlations2.png')
        plt.clf()

    def histograms(self, panelno, figlet, var1c, var1f, var2c, var2f, xlab,
                   ylab, panels=[2, 2]):
        plt.subplot(panels[0],panels[1], panelno)
        T_bins = bins(var1c, var1f)
        o_bins = bins(var2c, var2f)
        a=25
        bc_hist = np.zeros((int(a), int(a), 2), float)
        bc_hist = bothhists(bc_hist, var1c, var2c, df_cc.precip99, T_bins, o_bins)
        bc_hist = bothhists(bc_hist, var1f, var2f, df_cc.precip99, T_bins, o_bins)
        for x in range(0, int(a)):
            for y in range(0, int(a)):
                if bc_hist[x, y, 0] > 0:
                    bc_hist[x, y, 1] = (bc_hist[x, y, 1] / bc_hist[x, y, 0])
                    bc_hist[x, y, 0] = (100 * bc_hist[x, y, 0] /
                                        (len(var2c) + len(var2f)))
        pallette1 = plt.get_cmap('rainbow')
        pallette1.set_under('k', alpha=0.3)
        pallette1.set_over('Gray')
        levels = np.linspace(1., np.max(bc_hist[:, :, 1]), 20)
        cd = plt.pcolor(o_bins, T_bins, bc_hist[:, :, 1], vmin=1.,
                        vmax=np.max(bc_hist[:, :, 1]), cmap=pallette1)
        cb = plt.colorbar(cd, orientation='vertical')
        cb.set_label('both climates \n precip rate (mm/hr)', fontsize=16)
        plt.xlabel(xlab,fontsize=14)
        plt.ylabel(ylab, fontsize=14)
        plt.title(figlet, x=0.01, fontsize=16)
        return bc_hist

    def Rorys__hist(self, df_fc, df_cc, figname):
        rcParams['figure.figsize'] = 24, 24
        panelno = [1, 2, 3]
        figletter = ['a) ', 'b) ', 'c) ']
        xlab = ['1800 UTC minimum omega (Pa/s)', '1800 UTC minimum omega (Pa/s)',
                '1200 UTC mean horizontal shear (m/s)']
        ylab = ['1800 UTC TCW (kg/m2)', '1800 UTC cold pool marker (K)',
                '1800 UTC 99th percentile \n 10-m wind speed (m/s)']
        clab = ['both climates \n precip rate (mm/hr)',
                'both climates \n precip rate (mm/hr)',
                'both climates 1800 UTC \n min omega (Pa/s)']
        var1c = [df_cc.omega_1800_1p, df_cc.omega_1800_1p, df_cc.hor_shear]
        var1f = [df_fc.omega_1800_1p, df_fc.omega_1800_1p, df_fc.hor_shear]
        var2c = [df_cc.shear_TCW_eve, df_cc.cold, df_cc.midday_wind]
        var2f = [df_fc.shear_TCW_eve, df_fc.cold, df_fc.midday_wind]

        for i in panelno:
            bc_hist = self.histograms(i, figletter[i-1], var1c[i-1],  var1f[i-1],
                                var2c[i-1], var2f[i-1], xlab[i-1], ylab[i-1])
        plt.tight_layout()
        plt.savefig(figname + '_histograms.png')
        plt.clf()
